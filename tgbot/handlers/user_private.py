import logging
import re
from random import choice

from aiogram import F, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.filters.logic import or_f
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from bot_instance import BOT
from database.orm import (orm_add_anek, orm_get_access, orm_get_anek,
                          orm_get_welcome, orm_set_rate)
from filters.chat_types import ChatTypeFilter
from extensions.yandex import get_response
from kb.inline import get_inline_kb
from kb.reply import get_kb
from extensions.parcer import get_anec_list
from .states import AddAnec, GetQuery

user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(('private')))


START_KB = get_kb(
        'gpt',
        'joke_bot',
        placeholder='–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?'
    )


@user_private_router.message(or_f(CommandStart(), (F.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥')))
async def start(message: types.Message):
    hello_msg = '–í—ã–±–µ—Ä–∏, —á–µ–º —Ö–æ—á–µ—à—å –∑–∞–Ω—è—Ç—å—Å—èüê∂'
    if message.text == '/start':
        hello_msg = (f'–ü—Ä–∏–≤–µ—Ç, *{message.from_user.full_name}*!\n\n'
                    '–ú–µ–Ω—è –∑–æ–≤—É—Ç *–ß–æ–ø–∞*, —è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —à—É—Ç–æ–∫ –∏ –º—ã—Å–ª–µ–π. ') + hello_msg

    await message.answer(hello_msg, parse_mode=ParseMode.MARKDOWN, reply_markup=START_KB)


@user_private_router.message(or_f(Command('gpt'), (F.text == 'gpt')))
async def gpt(
    message: types.Message,
    state: FSMContext,
    session: AsyncSession
):
    # –§—É–Ω–∫—Ü–∏–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç FSM
    welcome_message = await orm_get_welcome(
        session=session,
        username=message.from_user.username
    )
    if welcome_message:
        hello = (f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å *{message.from_user.first_name}*!üëã\n'
            '–ú–µ–Ω—è –∑–æ–≤—É—Ç *–ß–æ–ø–∞*üê∂, —è —É–º–Ω—ã–π –ø—ë—Å.\n'
            '–ù–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.')
    else:
        hello = f'–°–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, *{message.from_user.username}*!'
    await message.answer(hello, parse_mode=ParseMode.MARKDOWN)
    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å',
        reply_markup=get_kb('–í—ã–π—Ç–∏ –∏–∑ gpt', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    )
    await state.set_state(GetQuery.query)


@user_private_router.message(GetQuery.query, F.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def gpt_quit(message: types.Message):
    text = ('üê∂–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å *YandexGPT*.\n\n'
        'üê∂–ö–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –ø–æ *2* –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞\n\n'
        'üê∂–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ @anakinnikita')

    await message.answer(
        text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_kb('–í—ã–π—Ç–∏ –∏–∑ gpt', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    )


@user_private_router.message(GetQuery.query, F.text == '–í—ã–π—Ç–∏ –∏–∑ gpt')
async def gpt_quit(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer('–í—ã –≤—ã—à–ª–∏', reply_markup=START_KB)


@user_private_router.message(GetQuery.query, F.text)
async def gpt_query(message: types.Message, session: AsyncSession):
    logging.info(f'Text from query: {message.text}')
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–±–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    user_access = await orm_get_access(
        session=session,
        data=message.from_user.username
    )
    if user_access:
        response_message = await message.answer('–ü–µ—á–∞—Ç–∞–µ—Ç...')
        # –ó–∞–ø—Ä–æ—Å –∫ gpt
        response = await get_response(message.text)
        # –¢–∞–∫ –∫–∞–∫ markdown gpt –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∞ '**' –Ω–∞ '*
        response = re.sub(r'(?<!\*)\*(?!\*)', '\*', response)
        response = re.sub(r'\*\*', '\\*', response)
        logging.info(f'Text from answer: {response}...')
        await BOT.delete_message(
            message.chat.id,
            response_message.message_id
        )
        await message.answer(
            response,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_kb('–í—ã–π—Ç–∏ –∏–∑ gpt', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
        )
    else:
        await message.answer('–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø—Ä–æ–±–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @anakinnikita.')


@user_private_router.message(or_f(
    Command('joke_bot'),
    (F.text.lower() == 'joke_bot')
))
async def menu(message: types.Message):
    await message.answer('–≠—Ç–æ –º–µ–Ω—éüëá', reply_markup=get_kb(
        '–•–æ—á—É –∞–Ω–µ–∫–¥–æ—ÇüòÅ', '–î–æ–±–∞–≤–∏—Ç—å –∞–Ω–µ–∫–¥–æ—ÇüòÉüëç', '–ê–Ω–µ–∫–¥–æ—Ç—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ü§£', '‚Ü©Ô∏è –ù–∞–∑–∞–¥',
        placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:',
        sizes=(1, 1),
    ))


@user_private_router.message(F.text == '–•–æ—á—É –∞–Ω–µ–∫–¥–æ—ÇüòÅ')
async def anecdote(message: types.Message):
    anec_list = await get_anec_list()
    await message.answer(choice(anec_list))


@user_private_router.message(F.text == '–ê–Ω–µ–∫–¥–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–πü§£')
async def anecdote_from_users(message: types.Message, session: AsyncSession):
    result = await orm_get_anek(session)
    if result:
        anecdote, rate = result
        text = ('üê∂–†–µ–π—Ç–∏–Ω–≥:\n'
            f'{str(rate)}\n\n'
            'üê∂–ê–≤—Ç–æ—Ä:\n'
            f'@{str(anecdote.users.username)}\n\n'
            'üê∂ –ö–∞—Ç–µ–≥–æ—Ä–∏—è\n'
            f'{anecdote.category.name}\n\n'
            'üê∂–¢–µ–∫—Å—Ç:\n'
            f'{anecdote.text}'
        )
        await message.answer(
            text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_inline_kb(
                {'üëç': f'rate_1_{anecdote.id}_{message.from_user.username}',
                'üëé': f'rate_-1_{anecdote.id}_{message.from_user.username}'},
                sizes=(2,)
            )
        )
    else:
        await message.answer('–ó–¥–µ—Å—å –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç.üòû')


@user_private_router.callback_query(F.data.startswith('rate_'))
async def rate_anecdote(callback: types.CallbackQuery, session: AsyncSession):
    data = callback.data.split('_')
    _, rate, anecdote_id, user = data
    await orm_set_rate(session, int(anecdote_id), int(rate), user)
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer('–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ —É—á—Ç–µ–Ω–∞!')


@user_private_router.message(
    StateFilter(None),
    F.text == '–î–æ–±–∞–≤–∏—Ç—å –∞–Ω–µ–∫–¥–æ—ÇüòÉüëç'
)
async def add_anek(message: types.Message, state: FSMContext, session: AsyncSession):
    # –§—É–Ω–∫—Ü–∏–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç FSM
    welcome_message = await orm_get_welcome(
        session=session,
        username=message.from_user.username
    )
    if welcome_message:
        hello = (f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å *{message.from_user.first_name}*\!üëã\n'
            '–ù–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ª—é–±–æ–π –∞–Ω–µ–∫–¥–æ—Ç\.')
    else:
        hello = f'–°–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, *{message.from_user.username}*\!'
    await message.answer(hello, parse_mode=ParseMode.MARKDOWN_V2)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    await state.set_state(AddAnec.category)


@user_private_router.message(AddAnec.category, F.text)
async def add_category(message: types.Message, state: FSMContext):
    await state.update_data(username=message.from_user.username, category=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç")
    await state.set_state(AddAnec.text)


@user_private_router.message(AddAnec.text, F.text)
async def add_text(message: types.Message, state: FSMContext, session: AsyncSession):
    await state.update_data(text=message.text)
    await message.answer("–£—Å–ø–µ—à–Ω–æ")
    data = await state.get_data()
    await orm_add_anek(session=session, data=data)
    await state.clear()
